#!/usr/bin/perl
use File::Basename;
use DBI;
use warnings;

##List files for processing (temporary until script is complete)
@mainProc=("ddnCoreLabels.xml","ddnLabels.xml","ddnPublishers.xml","ddnReqLabels.xml","LocalLabels.xml","finLabels.xml");

##Check for command line arguments. Expects two to be present.
if ( $#ARGV <= "0" ) {

	print "This script requires a database and directory be specified at run time.\n";
	die "Ex. \"./label.pl db_name dir_name\"\n" ;

}

##Assign commandline arguments to variables
$db=$ARGV[0];
$dir=$ARGV[1];

##set up the connect to the database
$dbh = DBI->connect("DBI:mysql:database=".$db.";host=reghost","quest","Pegestech1",{'RaiseError' => 1});


#@list=glob("$dir/*.xml");
#@list=("$dir/ddnLabels.xml");

##loop to process each xml file
foreach $in (@mainProc) {
	
	print "Processing $in...\n";
	
	##Open current file in a file handle
	open $fh, '<', $dir."/".$in or die "Can't open input $!\n";
	@file=<$fh>;

	#Trim file name for genric use 
	($name=basename($in)) =~ s/\.xml//;


	##Define sql statement for label info only if file equals string
	if ( $name eq "LocalLabels" ) {

		$prepConf = $dbh->prepare("insert into ".$name." (label,source,destination,multTag,consumer,provider,type,SrcID,constituents,sps,instSide,instID) VALUES(?,?,?,?,?,?,?,?,?,?,?,?);");

	}

	##Define sql statement for label info for every other file
	else {

		$prepConf = $dbh->prepare("insert into ".$name." (label,source,destination,multTag,consumer,spsList,provider,type,SrcID,constituents,sps,instSide,instID) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?);");

	}
		
	#Define sql statement for multicast tables
	$prepMult = $dbh->prepare("insert into ".$name."Mult (tag,addr,port,dscp) VALUES(?,?,?,?);");

		#Loop to process each line in the current file
		foreach $line (@file) {

			#Parse contents of multicast info and insert to db
			if ( $line =~ /\Q<multAddr TAG\E/ ) {

				@multAddr=split(/\"/,$line);
				$prepMult->execute($multAddr[1],$multAddr[3],$multAddr[5],$multAddr[7]);
				#push (@marray,$mAddr);

			}

			#Collect label id for later use
			if ( $line =~ /\Q<label ID\E/ ){

				@lar=split(/\"/,$line);
				$l=$lar[1];
				#print "label is $l\n";
			}

			#Collect source for later use
			if ( $line =~ /\Q<source\E/ ){

				@sar=split(/[<,>]+/,$line);
				$sour=$sar[2];
				#print "source is $sour\n";

			}

			#Collect destination for later use
			if ( $line =~ /\Q<destination\E/ ){

				@dest=split(/[<,>]+/,$line);
				$des=$dest[2];
				#print "destination is $des\n";

			}

			#Collect multicast tag for later use
			if ( $line =~ /\Q<multTag\E/ ){

				@multTag=split(/[<,>]+/,$line);
				$mtag=$multTag[2];
				#print "multTag is $mtag\n";

			}

			#Collect consumer for later use
			if ( $line =~ /\Q<consumer\E/ ){

				@consum=split(/[<>]+/,$line);
				$consumer=$consum[2];
				#print "consumer is $cons\n";

			}

			#Collect sps list for later use
			if ( $line =~ /\Q<spsList\E/ ){

				if ( $name eq "LocalLabels" ) {

					next;

				}

				@spsList=split(/[<,>]+/,$line);
				$spsL=$spsList[2];
				#print "spsList is $spsL\n";

			}

			#Collect provider name for later use
			if ( $line =~ /\Q<provider NAME\E/ ){

				@provid=split(/\"/,$line);
				$prov=$provid[1];
				#print "provider is $prov\n";

			}

			#Collect type for later use
			if ( $line =~ /\Q<type\E/ ){

				@ty=split(/[<,>]+/,$line);
				$type=$ty[2];
				#print "type is $type\n";

			}

			#Collect source id for later use
			if ( $line =~ /\Q<SrcID\E/ ){

				@sid=split(/[<,>]+/,$line);
				$srcid=$sid[2];
				#print "SrcID is $srcid\n";

			}

			#Collect contituent for later use
			if ( defined $l && $line =~ /\Q<constituents\E/ ){

				@constit=split(/[<,>]+/,$line);
				$cons=$constit[2];
				#print "constituents is $cons\n";

			}

			#Collect cva multicast tag for later use
			if ( $name eq "ddnReqLabels.xml" || $name eq "ddnPublishers.xml" ) {

				if ( $line =~ /\Q<cvaMultTag\E/ ) {

					@cva=split(/[<>]+/,$line);
					$cvaM=$cva[2];	

				}

			}

			#Collect sps ric for later use
			if ( $line =~ /\Q<sps>\E/ ){

				@Sps=split(/[<,>]+/,$line);
				$sps=$Sps[2];
				#print "sps is $sps\n";

			}

			#Collect the letter designation and name of hosts for later use
			if ( $line =~ /\Q<inst ID\E/ ) {

				@instid=split(/[<,>,"]+/,$line);
				$instLet=$instid[2];
				$inid=$instid[3];
				#print "instId is $inid with letter $insLet\n";
				#$conf = "$l/$sour/$des/$mtag/$consumer/$spsL/$prov/$type/$srcid/$cons/$sps/$insLet/$inid";

				#Insert relevant data based on files being processed
				if ( $name eq "ddnReqLabels.xml" || $name eq "ddnPublishers.xml" ) {

					#Will insert labelid,source,destination,multTag,consumer,spslist,provider,type,srcid,constituents,cvamult,sps,host letter,host name
					$prepConf->execute($l,$sour,$des,$mtag,$consumer,$spsL,$prov,$type,$srcid,$cons,$cvaM,$sps,$instLet,$inid);

				}

				elsif ( $name eq "LocalLabels" ) {

					#Will insert labelid,source,destination,multTag,consumer,provider,type,srcid,constituents,sps,host letter,host name
					$prepConf->execute($l,$sour,$des,$mtag,$consumer,$prov,$type,$srcid,$cons,$sps,$instLet,$inid);

				}

				else {
		
					#Will insert labelid,source,destination,multTag,consumer,spslist,provider,type,srcid,constituents,sps,host letter,host name
					$prepConf->execute($l,$sour,$des,$mtag,$consumer,$spsL,$prov,$type,$srcid,$cons,$sps,$instLet,$inid);

				}

				#push (@entry,$conf);

			}

			#Undefine variables once provider close tag is read
			if ( $line =~ /\Qprovider>\E/ ){

				undef $prov;
				undef $type;
				undef $srcid;
				undef $cons;
				undef $sps;
				undef $instLet;
				undef $inid;

			}

			#Undefine variables once label close tag is read
			if ( $line =~ /\Qlabel>\E/ ){

				undef $l;
				undef $sour;
				undef $des;
				undef $mtag;
				undef $consumer;
				undef $spsL;
				#print "Matched label close\n";

			}

		}

}

print "\nDone\n";
